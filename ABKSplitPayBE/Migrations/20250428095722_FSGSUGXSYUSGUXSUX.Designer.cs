// <auto-generated />
using System;
using ABKSplitPayBE.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ABKSplitPayBE.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250428095722_FSGSUGXSYUSGUXSUX")]
    partial class FSGSUGXSYUSGUXSUX
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ABKSplitPayBE.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CartId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemId"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.Installment", b =>
                {
                    b.Property<int>("InstallmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstallmentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstallmentNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("InstallmentId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Installments");
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentPlanId")
                        .HasColumnType("int");

                    b.Property<int?>("ShippingAddressId")
                        .HasColumnType("int");

                    b.Property<string>("ShippingMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("PaymentPlanId");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentMethodId"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ExpiryMonth")
                        .HasColumnType("int");

                    b.Property<int>("ExpiryYear")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("LastFourDigits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PaymentMethodId");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.PaymentPlan", b =>
                {
                    b.Property<int>("PaymentPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentPlanId"));

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("IntervalDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumberOfInstallments")
                        .HasColumnType("int");

                    b.HasKey("PaymentPlanId");

                    b.ToTable("PaymentPlans");

                    b.HasData(
                        new
                        {
                            PaymentPlanId = 1,
                            InterestRate = 0m,
                            IntervalDays = 0,
                            IsActive = true,
                            Name = "Pay Full",
                            NumberOfInstallments = 1
                        },
                        new
                        {
                            PaymentPlanId = 2,
                            InterestRate = 0m,
                            IntervalDays = 30,
                            IsActive = true,
                            Name = "2 Month",
                            NumberOfInstallments = 2
                        },
                        new
                        {
                            PaymentPlanId = 3,
                            InterestRate = 0m,
                            IntervalDays = 30,
                            IsActive = true,
                            Name = "3 Month",
                            NumberOfInstallments = 3
                        },
                        new
                        {
                            PaymentPlanId = 4,
                            InterestRate = 0m,
                            IntervalDays = 30,
                            IsActive = true,
                            Name = "4 Month",
                            NumberOfInstallments = 4
                        },
                        new
                        {
                            PaymentPlanId = 5,
                            InterestRate = 0m,
                            IntervalDays = 30,
                            IsActive = true,
                            Name = "5 Month",
                            NumberOfInstallments = 5
                        },
                        new
                        {
                            PaymentPlanId = 6,
                            InterestRate = 0m,
                            IntervalDays = 30,
                            IsActive = true,
                            Name = "6 Month",
                            NumberOfInstallments = 6
                        },
                        new
                        {
                            PaymentPlanId = 7,
                            InterestRate = 0m,
                            IntervalDays = 30,
                            IsActive = true,
                            Name = "7 Month",
                            NumberOfInstallments = 7
                        },
                        new
                        {
                            PaymentPlanId = 8,
                            InterestRate = 0m,
                            IntervalDays = 30,
                            IsActive = true,
                            Name = "8 Month",
                            NumberOfInstallments = 8
                        },
                        new
                        {
                            PaymentPlanId = 9,
                            InterestRate = 0m,
                            IntervalDays = 30,
                            IsActive = true,
                            Name = "9 Month",
                            NumberOfInstallments = 9
                        },
                        new
                        {
                            PaymentPlanId = 10,
                            InterestRate = 0m,
                            IntervalDays = 30,
                            IsActive = true,
                            Name = "10 Month",
                            NumberOfInstallments = 10
                        },
                        new
                        {
                            PaymentPlanId = 11,
                            InterestRate = 0m,
                            IntervalDays = 30,
                            IsActive = true,
                            Name = "11 Month",
                            NumberOfInstallments = 11
                        },
                        new
                        {
                            PaymentPlanId = 12,
                            InterestRate = 0m,
                            IntervalDays = 30,
                            IsActive = true,
                            Name = "12 Month",
                            NumberOfInstallments = 12
                        });
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("StoreId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Description = "Latest Samsung smartphone with advanced features.",
                            IsActive = true,
                            Name = "Samsung Galaxy S23",
                            PictureUrl = "https://images.shopkees.com/uploads/cdn/images/1000/9995354760_1675408536.webp",
                            Price = 250.00m,
                            ProductCategoryId = 1,
                            StockQuantity = 50,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            Description = "High-performance laptop for professionals.",
                            IsActive = true,
                            Name = "MacBook Pro",
                            PictureUrl = "https://store.storeimages.cdn-apple.com/4982/as-images.apple.com/is/mbp-spacegray-select-202206?wid=904&hei=840&fmt=jpeg&qlt=90&.v=1664497359481",
                            Price = 1200.00m,
                            ProductCategoryId = 1,
                            StockQuantity = 30,
                            StoreId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            Description = "Annual tuition fee for American International School.",
                            IsActive = true,
                            Name = "AIS Tuition Fee",
                            PictureUrl = "https://media.licdn.com/dms/image/v2/C561BAQE_m2Ujim4lyQ/company-background_10000/company-background_10000/0/1584559760344/american_international_school_kuwait_cover?e=2147483647&v=beta&t=zt2lRU5uJA-o2CHmJuVDqoWV8SIqa_W_F69eqQ3yRhs",
                            Price = 5000.00m,
                            ProductCategoryId = 2,
                            StockQuantity = 0,
                            StoreId = 5
                        },
                        new
                        {
                            ProductId = 4,
                            Description = "Annual tuition fee for American University of the Middle East.",
                            IsActive = true,
                            Name = "AUM Tuition Fee",
                            PictureUrl = "https://www.aum.edu.kw/images/ShareLogo.jpg",
                            Price = 1000.00m,
                            ProductCategoryId = 2,
                            StockQuantity = 100,
                            StoreId = 6
                        },
                        new
                        {
                            ProductId = 5,
                            Description = "MRI scan package.",
                            IsActive = true,
                            Name = "MRI",
                            PictureUrl = "https://www.capitalradiology.com.au/media/he1jvtno/mri-2000-x-1333-v2.png",
                            Price = 150.00m,
                            ProductCategoryId = 3,
                            StockQuantity = 0,
                            StoreId = 7
                        },
                        new
                        {
                            ProductId = 6,
                            Description = "Professional dental cleaning service.",
                            IsActive = true,
                            Name = "Dental Cleaning",
                            PictureUrl = "https://west85thdental.com/wp-content/uploads/2022/01/woman-getting-a-dental-cleaning.jpg",
                            Price = 80.00m,
                            ProductCategoryId = 3,
                            StockQuantity = 0,
                            StoreId = 8
                        },
                        new
                        {
                            ProductId = 7,
                            Description = "Modern 3-seater sofa set.",
                            IsActive = true,
                            Name = "Sofa Set",
                            PictureUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS9bK65Pig7XvG_6MJ9RcEXWfVijHKjTDmPzg&s",
                            Price = 400.00m,
                            ProductCategoryId = 4,
                            StockQuantity = 20,
                            StoreId = 3
                        },
                        new
                        {
                            ProductId = 8,
                            Description = "Elegant 6-seater dining table.",
                            IsActive = true,
                            Name = "Dining Table",
                            PictureUrl = "https://m.media-amazon.com/images/I/51Yt8mJTKzL.jpg",
                            Price = 300.00m,
                            ProductCategoryId = 4,
                            StockQuantity = 15,
                            StoreId = 4
                        });
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductCategoryId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ProductCategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            ProductCategoryId = 1,
                            Description = "Devices and gadgets such as smartphones, laptops, and TVs.",
                            IsActive = true,
                            Name = "Electronics",
                            PictureUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQGwOifpWIFylO-2Lkn8Zi5ECXt6PFr-ihOuw&s"
                        },
                        new
                        {
                            ProductCategoryId = 2,
                            Description = "Payments for school fees, uniforms, and educational materials.",
                            IsActive = true,
                            Name = "School Bills",
                            PictureUrl = "https://assets.visme.co/templates/banners/thumbnails/i_School-Tuition-Receipt_full.jpg"
                        },
                        new
                        {
                            ProductCategoryId = 3,
                            Description = "Payments for medical bills, consultations, and treatments.",
                            IsActive = true,
                            Name = "Medical Expenses",
                            PictureUrl = "https://www.aklerbrowning.com/wp-content/uploads/medical-expenses.jpg"
                        },
                        new
                        {
                            ProductCategoryId = 4,
                            Description = "Furniture items like sofas, beds, and dining tables.",
                            IsActive = true,
                            Name = "Home Furniture",
                            PictureUrl = "https://www.athome-furniture.com/web/image/159801-47a6cc44/OUTDOOghR-BANNER-ATHOME--copy-copy.jpg"
                        });
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StoreCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("StoreId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("StoreCategoryId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            StoreId = 1,
                            Description = "A leading retailer for electronics and books in the Middle East.",
                            IsActive = true,
                            LogoUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT_EYfEMiV59HZO1JVMunmUd-XHOpbVrWI8DQ&s",
                            Name = "Jarir Bookstore",
                            StoreCategoryId = 1,
                            WebsiteUrl = "https://www.jarir.com"
                        },
                        new
                        {
                            StoreId = 2,
                            Description = "Kuwait's largest electronics retailer.",
                            IsActive = true,
                            LogoUrl = "https://www.xcite.com/assets/icons/logo.jpg",
                            Name = "Xcite by Alghanim Electronics",
                            StoreCategoryId = 1,
                            WebsiteUrl = "https://www.xcite.com"
                        },
                        new
                        {
                            StoreId = 3,
                            Description = "Affordable furniture and home decor solutions.",
                            IsActive = true,
                            LogoUrl = "https://static.dezeen.com/uploads/2019/04/ikea-logo-new-hero-1.jpg",
                            Name = "IKEA Kuwait",
                            StoreCategoryId = 2,
                            WebsiteUrl = "https://www.ikea.com/kw"
                        },
                        new
                        {
                            StoreId = 4,
                            Description = "Stylish furniture and home accessories.",
                            IsActive = true,
                            LogoUrl = "https://d1yjjnpx0p53s8.cloudfront.net/styles/large/s3/abyat_wing_logo_0.jpg?itok=Trhx2GSu",
                            Name = "Abyat",
                            StoreCategoryId = 2,
                            WebsiteUrl = "https://www.abyat.com/kw/ar"
                        },
                        new
                        {
                            StoreId = 5,
                            Description = "A premier international school in Kuwait.",
                            IsActive = true,
                            LogoUrl = "https://media.licdn.com/dms/image/v2/C561BAQE_m2Ujim4lyQ/company-background_10000/company-background_10000/0/1584559760344/american_international_school_kuwait_cover?e=2147483647&v=beta&t=zt2lRU5uJA-o2CHmJuVDqoWV8SIqa_W_F69eqQ3yRhs",
                            Name = "American International School",
                            StoreCategoryId = 3,
                            WebsiteUrl = "https://www.ais-kuwait.org"
                        },
                        new
                        {
                            StoreId = 6,
                            Description = "AUM Top university in Kuwait in QS & Times Higher Education Rankings",
                            IsActive = true,
                            LogoUrl = "https://www.aum.edu.kw/images/ShareLogo.jpg",
                            Name = "AUM",
                            StoreCategoryId = 3,
                            WebsiteUrl = "https://www.aum.edu.kw/"
                        },
                        new
                        {
                            StoreId = 7,
                            Description = "A leading hospital in Kuwait offering comprehensive medical services.",
                            IsActive = true,
                            LogoUrl = "https://purchase.daralshifa.com/images/logo.png",
                            Name = "Dar Al Shifa Hospital",
                            StoreCategoryId = 4,
                            WebsiteUrl = "https://www.daralshifa.com"
                        },
                        new
                        {
                            StoreId = 8,
                            Description = "A premium hospital specializing in various medical treatments.",
                            IsActive = true,
                            LogoUrl = "https://www.sharpersoftware.com/img/Customers/RHHLogo.jpg",
                            Name = "Royale Hayat Hospital",
                            StoreCategoryId = 4,
                            WebsiteUrl = "https://www.royalehayat.com"
                        });
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.StoreCategory", b =>
                {
                    b.Property<int>("StoreCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreCategoryId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("StoreCategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("StoreCategories");

                    b.HasData(
                        new
                        {
                            StoreCategoryId = 1,
                            Description = "Stores specializing in electronic devices and gadgets.",
                            IsActive = true,
                            Name = "Electronics Stores",
                            PictureUrl = "https://i0.wp.com/zilani-int.com/wp-content/uploads/2023/02/8ebb2cb57bdb71ac4f0aaadfd61911d5.jpeg?w=680&ssl=1"
                        },
                        new
                        {
                            StoreCategoryId = 2,
                            Description = "Stores offering a variety of home furniture.",
                            IsActive = true,
                            Name = "Furniture Stores",
                            PictureUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/7/72/IKEA_Shopping_centre_Sweden.jpg/1200px-IKEA_Shopping_centre_Sweden.jpg"
                        },
                        new
                        {
                            StoreCategoryId = 3,
                            Description = "Services related to education, including schools and bookstores.",
                            IsActive = true,
                            Name = "Educational Services",
                            PictureUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQiCK3dZsrWBzP6I0HBpEjA-1-AqZoEeF1drQ&s"
                        },
                        new
                        {
                            StoreCategoryId = 4,
                            Description = "Hospitals, clinics, and pharmacies offering medical services.",
                            IsActive = true,
                            Name = "Medical Services",
                            PictureUrl = "https://previews.123rf.com/images/shutterboythailand/shutterboythailand1604/shutterboythailand160400336/58429893-medical-service-word-on-tablet-screen-with-medical-equipment-on-background.jpg"
                        });
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<int>("InstallmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TransactionReference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TransactionId");

                    b.HasIndex("InstallmentId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.WishList", b =>
                {
                    b.Property<int>("WishListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WishListId"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("WishListId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.Address", b =>
                {
                    b.HasOne("ABKSplitPayBE.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.Cart", b =>
                {
                    b.HasOne("ABKSplitPayBE.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Cart")
                        .HasForeignKey("ABKSplitPayBE.Models.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.CartItem", b =>
                {
                    b.HasOne("ABKSplitPayBE.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABKSplitPayBE.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.Installment", b =>
                {
                    b.HasOne("ABKSplitPayBE.Models.Order", "Order")
                        .WithMany("Installments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABKSplitPayBE.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Installments")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.Order", b =>
                {
                    b.HasOne("ABKSplitPayBE.Models.PaymentPlan", "PaymentPlan")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABKSplitPayBE.Models.Address", "ShippingAddress")
                        .WithMany("Orders")
                        .HasForeignKey("ShippingAddressId");

                    b.HasOne("ABKSplitPayBE.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("PaymentPlan");

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.OrderItem", b =>
                {
                    b.HasOne("ABKSplitPayBE.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABKSplitPayBE.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.PaymentMethod", b =>
                {
                    b.HasOne("ABKSplitPayBE.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.Product", b =>
                {
                    b.HasOne("ABKSplitPayBE.Models.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABKSplitPayBE.Models.Store", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId");

                    b.Navigation("ProductCategory");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.Store", b =>
                {
                    b.HasOne("ABKSplitPayBE.Models.StoreCategory", "StoreCategory")
                        .WithMany("Stores")
                        .HasForeignKey("StoreCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreCategory");
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.Transaction", b =>
                {
                    b.HasOne("ABKSplitPayBE.Models.Installment", "Installment")
                        .WithMany("Transactions")
                        .HasForeignKey("InstallmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Installment");
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.WishList", b =>
                {
                    b.HasOne("ABKSplitPayBE.Models.Product", "Product")
                        .WithMany("WishlistItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABKSplitPayBE.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("WishListItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ABKSplitPayBE.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ABKSplitPayBE.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABKSplitPayBE.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ABKSplitPayBE.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.Address", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.ApplicationUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("PaymentMethods");

                    b.Navigation("WishListItems");
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.Installment", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.Order", b =>
                {
                    b.Navigation("Installments");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.PaymentMethod", b =>
                {
                    b.Navigation("Installments");
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.PaymentPlan", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");

                    b.Navigation("WishlistItems");
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.Store", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ABKSplitPayBE.Models.StoreCategory", b =>
                {
                    b.Navigation("Stores");
                });
#pragma warning restore 612, 618
        }
    }
}
